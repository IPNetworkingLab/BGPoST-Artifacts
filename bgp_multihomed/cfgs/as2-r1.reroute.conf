
log "/dev/shm/multihomed_exp/as2-r1/bird.log" all;

debug protocols all;

control socket "/dev/shm/multihomed_exp/as2-r1/as2-r1.ctrl_serv.sk";

filter reject_static_connected {
  if net ~ [ 10.0.2.0/24 ] then {
    reject;
  }
  if net ~ [ 10.0.0.0/24 ] then {
    reject;
  }
  if net ~ [ 192.168.68.0/24+ ] then {
    reject;
  }
  accept;
}

protocol device {
}

# generate directly connected routes
protocol direct {
  ipv4;
  ipv6;
  interface "eth-*";
}

protocol static {
  ipv4;
  ## Important to change nexthop here
  ## to preserve BGP routes as reachable
  ### Note: The route is already set by the certificate
  ### But bird does not have the knowledge of this new route
  ### So force it here.
  ##### Note 2: I'm aware of "learn all" to import proto kernel routes in bird...
  #####         But should remove proto direct. XXX change me !
  route 192.168.68.1/32 via 172.16.0.1; ## gre-gre tunnel configured with cmds contained in the certificate
  route 10.0.0.0/24 via 10.0.2.1;
}


protocol kernel kv4 {
  ipv4 {
    import all;
    export all;
  };
}

protocol kernel kv6 {
  ipv6 {
    import all;
    export all;
  };
}

protocol bgp as1_r1 {
  description "AS1-R1 session";
  local 192.168.68.2 as 65002;
  neighbor 192.168.68.1 as 65001;
  multihop; # lo not directly connected
  
  graceful restart on;

  transport tls;
  tls root ca "/dev/shm/multihomed_exp/ca.cert.pem";
  tls certificate "/dev/shm/multihomed_exp/as2-r1/as2-r1.cert.pem";
  tls pkey "/dev/shm/multihomed_exp/as2-r1/as2-r1.key";
  tls peer sni "as1-r1.infra";
  tls local sni "as2-r1.infra";
  tls export secrets "/dev/shm/multihomed_exp/as2-r1/secrets.tls";

  keepalive time 10;
  hold time 30;

  ipv4 {
    import filter reject_static_connected;
    export all;
  };

  ipv6 {
    import all;
    export all;
  };
}

protocol bgp as3_r1 {
  description "AS3-R1 session (monitor)";
  local 10.0.3.2 port 1179 as 65002;
  neighbor 10.0.3.1 port 1179 as 65003;

  graceful restart on;
  keepalive time 10;
  hold time 30;

  ipv4 {
    import filter reject_static_connected;
    export all;
  };

  ipv6 {
    import all;
    export all;
  };
}

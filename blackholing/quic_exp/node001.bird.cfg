router id 0.0.0.2;

mrtdump "/tmp/node001.updates.mrt";
mrtdump extended_timestamp;
mrtdump protocols { messages };


protocol device {}

protocol direct {
  ipv4;			# Connect to default IPv4 table
  ipv6;			# ... and to default IPv6 table
}

protocol kernel {
  learn;
  ipv4 {
    export all;
    import all;
  };
}

protocol kernel {
  learn yes;
  ipv6 {
    export all;
    import all;
  };
}

filter rtbh_trigger {
  if (65005, 666) ~ bgp_community then accept;
  else reject;
}

filter rtbh_trigger_block {
  if (65005, 666) ~ bgp_community then reject;
  else accept;
}

protocol bgp node000_0_v4 {
  local 10.0.0.1 as 65000;
  neighbor 10.0.0.0 as 65000;
  hold time 240;

  transport quic;
  certificate "/tmp/quic_exp/certs/node001.cert.pem";
  key "/tmp/quic_exp/certs/node001.key";
  alpn "BGP4";
  remote sni "node000";
  tls_insecure on;
  
  ipv4 {
    import all;
    export all;
    next hop self;
  };
}

protocol bgp node000_0_v6 {
  local fc01::1 as 65000;
  neighbor fc01:: as 65000;
  hold time 240;

  transport quic;
  certificate "/tmp/quic_exp/certs/node001.cert.pem";
  key "/tmp/quic_exp/certs/node001.key";
  alpn "BGP4";
  remote sni "node000";
  tls_insecure on;

  ipv6 {
    import all;
    export all;
    next hop self;
  };
}

protocol bgp node002_0_v4 {
  local 10.0.0.2 as 65001;
  neighbor 10.0.0.3 as 65002;
  hold time 240;

  transport quic;
  certificate "/tmp/quic_exp/certs/node001.cert.pem";
  key "/tmp/quic_exp/certs/node001.key";
  alpn "BGP4";
  remote sni "node002";
  tls_insecure on;
  
  ipv4 {
    import all;
    # do not announce the blackholed route on usual path
    export filter rtbh_trigger_block;
  };
}

protocol bgp node002_0_v6 {
  local fc01::2 as 65001;
  neighbor fc01::3 as 65002;
  hold time 240;

  transport quic;
  certificate "/tmp/quic_exp/certs/node001.cert.pem";
  key "/tmp/quic_exp/certs/node001.key";
  alpn "BGP4";
  remote sni "node002";
  tls_insecure on;
  
  ipv6 {
    import all;
    export all;
  };
}



# multihop session to "tier 1" AS
protocol bgp node004_0_v4 {
  local 10.0.0.2 as 65001;
  neighbor 10.0.0.7 as 65004;
  hold time 240;
  multihop;

  transport quic;
  certificate "/tmp/quic_exp/certs/node001.cert.pem";
  key "/tmp/quic_exp/certs/node001.key";
  alpn "BGP4";
  remote sni "node004";
  tls_insecure on;

  ipv4 {
    import none;
    # only export routes with (65005, 666) community;
    export filter rtbh_trigger;
  };
}
